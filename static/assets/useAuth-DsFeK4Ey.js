import{P as C,r as m,a as X}from"./vendor-BxNawP4f.js";import{s as c,T as p,U as i,a as S,p as j,l as O,L as q}from"./index-DyxCg8e9.js";function A(){const R=C(),d=m(c.get(p)),h=m(c.get(i)),a=m(!1),v=X(()=>!!d.value),y=e=>{var o;return((o=h.value)==null?void 0:o.roles.includes(e))||!1},E=e=>{var o;return((o=h.value)==null?void 0:o.permissions.includes(e))||!1},g=e=>{d.value=e,e?(c.set(p,e),localStorage.setItem(p,e),localStorage.setItem("access_token",e),console.log("Token已保存到localStorage的TOKEN_KEY和access_token键")):(c.remove(p),localStorage.removeItem(p),localStorage.removeItem("access_token"),console.log("Token已从localStorage中移除"))},w=e=>{h.value=e,e?(c.set(i,e),localStorage.setItem(i,JSON.stringify(e)),localStorage.setItem(S,JSON.stringify(e.roles||[]))):(c.remove(i),localStorage.removeItem(i),localStorage.removeItem(S))},_=async(e,o)=>{try{a.value=!0,console.log("开始登录流程，用户名:",e),console.log("获取CSRF令牌...");const t=await fetch("/api/v1/auth/csrf/",{method:"GET",credentials:"include",headers:{Accept:"application/json","X-Requested-With":"XMLHttpRequest"}});if(!t.ok)throw new Error(`获取CSRF token失败: ${t.status}`);const s=await t.json();if(console.log("CSRF响应:",s),!(s!=null&&s.csrf_token))throw new Error("无法获取CSRF token");console.log("尝试登录...");const r=await fetch("/api/v1/users/token/",{method:"POST",headers:{"Content-Type":"application/json","X-CSRFToken":s.csrf_token,"X-Requested-With":"XMLHttpRequest"},credentials:"include",body:JSON.stringify({username:e,password:o})});if(!r.ok){const f=await r.json().catch(()=>null);throw new Error((f==null?void 0:f.detail)||`登录失败: ${r.status}`)}const l=await r.json();console.log("登录响应:",l);const{access:n,refresh:u}=l;if(!n||!u)throw new Error("服务器响应缺少必要的token");console.log("保存tokens..."),localStorage.setItem("access_token",n),localStorage.setItem("refresh_token",u),c.set("access_token",n),g(n),await new Promise(f=>setTimeout(f,100));const T=localStorage.getItem("access_token");return console.log("验证保存的token:",T?"已正确保存":"保存失败"),console.log("获取用户信息..."),await k(),!0}catch(t){throw console.error("登录失败:",t),g(null),w(null),t}finally{a.value=!1}},I=async()=>{try{a.value=!0,d.value&&await j("/api/v1/users/logout/",{})}catch(e){O.error("Logout failed:",e)}finally{g(null),w(null),localStorage.removeItem("refresh_token"),a.value=!1,R.push(q)}},k=async()=>{try{const e=localStorage.getItem("access_token");if(!e)return console.log("无token，跳过获取用户信息"),!1;console.log("开始获取用户信息...");try{const o=await fetch("/api/v1/users/me/",{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${e}`,"X-Requested-With":"XMLHttpRequest"},credentials:"include"});if(!o.ok)throw new Error(`获取用户信息失败: ${o.status}`);const t=await o.json();if(console.log("获取用户信息成功:",t),t){const s={...t,roles:t.roles||t.groups||["user"],permissions:t.permissions||t.user_permissions||[]};return h.value=s,c.set(i,s),localStorage.setItem(i,JSON.stringify(s)),localStorage.setItem(S,JSON.stringify(s.roles)),console.log("用户信息保存成功:",s),!0}else throw new Error("获取用户信息失败：响应中无用户数据")}catch(o){throw console.error("获取用户信息API调用失败:",o),o}}catch(e){return console.error("获取用户信息流程失败:",e),!1}};return{token:d,userInfo:h,loading:a,isAuthenticated:v,hasRole:y,hasPermission:E,login:_,logout:I,refreshUserInfo:k,setToken:g,setUserInfo:w,forgotPassword:async e=>{try{a.value=!0,console.log("获取CSRF令牌...");const o=await fetch("/api/v1/auth/csrf/",{method:"GET",credentials:"include",headers:{Accept:"application/json","X-Requested-With":"XMLHttpRequest"}});if(!o.ok)throw new Error(`获取CSRF token失败: ${o.status}`);const t=await o.json();if(!(t!=null&&t.csrf_token))throw new Error("无法获取CSRF token");const s=await fetch("/api/v1/users/password-reset/",{method:"POST",headers:{"Content-Type":"application/json","X-CSRFToken":t.csrf_token,"X-Requested-With":"XMLHttpRequest"},credentials:"include",body:JSON.stringify({email:e})});if(!s.ok){const r=await s.json().catch(()=>null);throw new Error((r==null?void 0:r.detail)||`重置密码请求失败: ${s.status}`)}return!0}catch(o){throw console.error("重置密码请求失败:",o),o}finally{a.value=!1}},resetPassword:async(e,o,t,s)=>{try{a.value=!0,console.log("获取CSRF令牌...");const r=await fetch("/api/v1/auth/csrf/",{method:"GET",credentials:"include",headers:{Accept:"application/json","X-Requested-With":"XMLHttpRequest"}});if(!r.ok)throw new Error(`获取CSRF token失败: ${r.status}`);const l=await r.json();if(!(l!=null&&l.csrf_token))throw new Error("无法获取CSRF token");const n=await fetch("/api/v1/users/password-reset/confirm/",{method:"POST",headers:{"Content-Type":"application/json","X-CSRFToken":l.csrf_token,"X-Requested-With":"XMLHttpRequest"},credentials:"include",body:JSON.stringify({uid:e,token:o,new_password:t,confirm_password:s})});if(!n.ok){const u=await n.json().catch(()=>null);throw new Error((u==null?void 0:u.detail)||`重置密码失败: ${n.status}`)}return!0}catch(r){throw console.error("重置密码失败:",r),r}finally{a.value=!1}}}}export{A as u};
