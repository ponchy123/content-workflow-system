version: '3.8'

services:
  # RabbitMQ服务
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - a2a_network
    restart: unless-stopped

  # MCP注册中心
  mcp_registry:
    build:
      context: ./mcp_registry
      dockerfile: Dockerfile
    container_name: mcp_registry
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./mcp_registry.db
      - SECRET_KEY=your-secret-key-here
    volumes:
      - ./mcp_registry:/app
    networks:
      - a2a_network
    depends_on:
      - rabbitmq
    restart: unless-stopped

  # 核心调度器
  core_scheduler:
    build:
      context: ./agents/core_scheduler
      dockerfile: Dockerfile
    container_name: core_scheduler
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - MCP_REGISTRY_URL=http://mcp_registry:8000
    volumes:
      - ./agents/core_scheduler:/app
    networks:
      - a2a_network
    depends_on:
      - rabbitmq
      - mcp_registry
    restart: unless-stopped

  # API网关
  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    ports:
      - "8001:8000"
    environment:
      - PORT=8000
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - MCP_REGISTRY_URL=http://mcp_registry:8000
    volumes:
      - ./api_gateway:/app
    networks:
      - a2a_network
    depends_on:
      - rabbitmq
      - mcp_registry
      - core_scheduler
    restart: unless-stopped

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8001
      - REACT_APP_WS_URL=ws://localhost:8001
    depends_on:
      - api_gateway
    networks:
      - a2a_network
    restart: unless-stopped

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    networks:
      - a2a_network
    restart: unless-stopped

  # Elasticsearch服务
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - a2a_network
    restart: unless-stopped

  # Logstash服务
  logstash:
    image: logstash:8.8.0
    container_name: logstash
    ports:
      - "5044:5044"
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
    networks:
      - a2a_network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Kibana服务
  kibana:
    image: kibana:8.8.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - a2a_network
    depends_on:
      - elasticsearch
    restart: unless-stopped

networks:
  a2a_network:
    driver: bridge

volumes:
  rabbitmq_data:
  prometheus_data:
  elasticsearch_data: